using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace P2DEngine
{
    public class Agario : myGame
    {
        Player player;
        Enemy enemy;

        myObjective Food;
        myObjective FoodA;
        myObjective FoodB;
        myObjective FoodC;

        Random rand = new Random();

        float playerSpeed = 0.6f;
        float baseStep = 30;
        float enemyStep = 30;
        float playerCenterX;
        float playerCenterY;

        float sizeFactor;
        float targetZoom;

        private bool debugMode = true;
        private float debugTimer = 0.0f;
        private const float debugInterval = 0.5f;

        private float playerDistance = 0.0f;

        int pistaX = 100;
        int pistaY = 100;
        int pistaAncho = 900;
        int pistaAlto = 900;
        int grosorBorde = 20;
        int randomX;
        int randomY;
        int foodCount;
        int foodSpeciaACount;
        int foodSpeciaBCount;
        int foodSpeciaCCount;

        private const int maxScore = 25;
        private bool isGameOver = false;

        private bool isInvulnerable = false;
        private float invulnerabilityTimer = 0.0f;
        private float speedBoostTimer = 0.0f;
        private float originalSpeed;

        public Agario(int width, int height, int FPS, myCamera c) : base(width, height, FPS, c)
        {
            currentCamera = new myCamera(0, 0, 800, 600, 1.0f);
            currentCamera.SetTargetPlayer(player);

            Color colorBorde = Color.DarkGray;

            player = new Player(pistaX + pistaAncho / 2, pistaY + pistaAlto / 2, 20, 20, Color.Red);

            int enemyX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
            int enemyY = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);

            enemy = new Enemy(enemyX, enemyY, 20, 20, Color.Blue);

            Instantiate(new myBlock(pistaX, pistaY, pistaAncho, grosorBorde, colorBorde));
            Instantiate(new myBlock(pistaX, pistaY + pistaAlto - grosorBorde, pistaAncho, grosorBorde, colorBorde));
            Instantiate(new myBlock(pistaX, pistaY, grosorBorde, pistaAlto, colorBorde));
            Instantiate(new myBlock(pistaX + pistaAncho - grosorBorde, pistaY, grosorBorde, pistaAlto, colorBorde));

            foodCount = 50;

            for (int i = 0; i < foodCount; i++)
            {
                randomX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                randomY = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);

                Food = new myObjective(randomX, randomY, 10, 10, Color.Yellow, true);
                Instantiate(Food);
            }

            foodSpeciaACount = 5;

            for (int i = 0; i < foodSpeciaACount; i++)
            {
                randomX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                randomY = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);

                FoodA = new myObjective(randomX, randomY, 15, 15, Color.Green, true);
                Instantiate(FoodA);
            }
            foodSpeciaBCount = 5;

            for (int i = 0; i < foodSpeciaBCount; i++)
            {
                randomX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                randomY = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);
                FoodB = new myObjective(randomX, randomY, 20, 20, Color.Red, true);
                Instantiate(FoodB);
            }

            foodSpeciaCCount = 5;

            for (int i = 0; i < foodSpeciaCCount; i++)
            {
                randomX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                randomY = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);
                FoodC = new myObjective(randomX, randomY, 5, 5, Color.Blue, true);
                Instantiate(FoodC);
            }

            Instantiate(player);
            Instantiate(enemy);
        }

        private bool IsColliding(myGameObject a, myGameObject b)
        {
            float aLeft = a.x;
            float aRight = a.x + a.sizeX;
            float aTop = a.y;
            float aBottom = a.y + a.sizeY;

            float bLeft = b.x;
            float bRight = b.x + b.sizeX;
            float bTop = b.y;
            float bBottom = b.y + b.sizeY;

            return (aRight > bLeft && aLeft < bRight && aBottom > bTop && aTop < bBottom);
        }

        private bool WillCollide(Player player, int deltaX, int deltaY)
        {
            float newX = player.x + deltaX;
            float newY = player.y + deltaY;

            Rectangle playerRect = new Rectangle((int)newX, (int)newY, (int)player.sizeX, (int)player.sizeY);

            foreach (var obj in gameObjects)
            {
                if (obj is myBlock block && !(block is Player) && !(block is myObstacle) && !(block is myObjective))
                {
                    Rectangle blockRect = new Rectangle((int)block.x, (int)block.y, (int)block.sizeX, (int)block.sizeY);
                    if (playerRect.IntersectsWith(blockRect))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        protected override void ProcessInput()
        {
            if (isGameOver)
                return;

            if (myInputManager.IsKeyPressed(Keys.W) && !WillCollide(player, 0, -(int)(baseStep * player.speed)))
            {
                player.y -= (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.A) && !WillCollide(player, -(int)(baseStep * player.speed), 0))
            {
                player.x -= (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.S) && !WillCollide(player, 0, (int)(baseStep * player.speed)))
            {
                player.y += (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.D) && !WillCollide(player, (int)(baseStep * player.speed), 0))
            {
                player.x += (int)(baseStep * player.speed);
            }

            if (myInputManager.IsKeyPressed(Keys.Up) && !WillCollide(player, 0, -(int)(baseStep * player.speed)))
            {
                player.y -= (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.Left) && !WillCollide(player, -(int)(baseStep * player.speed), 0))
            {
                player.x -= (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.Down) && !WillCollide(player, 0, (int)(baseStep * player.speed)))
            {
                player.y += (int)(baseStep * player.speed);
            }
            if (myInputManager.IsKeyPressed(Keys.Right) && !WillCollide(player, (int)(baseStep * player.speed), 0))
            {
                player.x += (int)(baseStep * player.speed);
            }
        }

        void PlayerGrowth()
        {
            player.sizeX += 2;
            player.sizeY += 2;
            baseStep -= 0.1f;

            if (baseStep < 1) baseStep = 1;
        }

        protected override void RenderGame(Graphics g)
        {
            g.FillRectangle(new SolidBrush(Color.Black), 0, 0, windowWidth, windowHeight);

            foreach (var gameObject in gameObjects)
            {
                gameObject.Draw(g,
                    currentCamera.GetViewPosition(gameObject.x, gameObject.y),
                    currentCamera.GetViewSize(gameObject.sizeX, gameObject.sizeY));
            }
        }

        public static float Lerp(float value1, float value2, float amount)
        {
            return value1 + (value2 - value1) * amount;
        }

        protected override void Update()
        {
            if (isGameOver)
                return;

            debugTimer += deltaTime;

            // Handle invulnerability timer
            if (isInvulnerable)
            {
                invulnerabilityTimer -= deltaTime;
                if (invulnerabilityTimer <= 0)
                {
                    isInvulnerable = false;
                    player.SetColor(Color.Red); // Reset player color
                }
            }

            // Handle speed boost timer
            if (speedBoostTimer > 0)
            {
                speedBoostTimer -= deltaTime;
                if (speedBoostTimer <= 0)
                {
                    player.speed = originalSpeed; // Reset speed
                    player.SetColor(Color.Red); // Reset player color
                }
            }

            sizeFactor = (player.sizeX + player.sizeY) / 40.0f;
            targetZoom = Math.Max(0.5f, Math.Min(1.5f, 1.0f / sizeFactor));

            currentCamera.zoom = Lerp(currentCamera.zoom, targetZoom, 0.05f);

            playerCenterX = player.x + player.sizeX / 2;
            playerCenterY = player.y + player.sizeY / 2;

            currentCamera.x = playerCenterX - (windowWidth / (2 * currentCamera.zoom));
            currentCamera.y = playerCenterY - (windowHeight / (2 * currentCamera.zoom));

            List<myObjective> foodToRemove = new List<myObjective>();

            foreach (var gameObject in gameObjects)
            {
                if (gameObject is myObjective food)
                {
                    if (IsColliding(player, food))
                    {
                        // Prioritize special food items
                        if (food.brush.Color == Color.Green) // FoodA
                        {
                            player.x = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                            player.y = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);
                            Console.WriteLine("Player teleported by FoodA.");
                        }
                        else if (food.brush.Color == Color.Red) // FoodB
                        {
                            isInvulnerable = true;
                            invulnerabilityTimer = 5.0f; // 5 seconds
                            player.SetColor(Color.Gold); // Change player color to indicate invulnerability
                            Console.WriteLine("Player granted invulnerability by FoodB.");
                        }
                        else if (food.brush.Color == Color.Blue) // FoodC
                        {
                            originalSpeed = player.speed;
                            player.speed *= 1.5f; // Increase speed by 50%
                            speedBoostTimer = 5.0f; // 5 seconds
                            player.SetColor(Color.Cyan); // Change player color to indicate speed boost
                            Console.WriteLine("Player granted speed boost by FoodC.");
                        }
                        else
                        {
                            // Handle normal food
                            PlayerGrowth();
                        }

                        foodToRemove.Add(food); // Add food to removal list
                    }
                }
            }

            foreach (var food in foodToRemove)
            {
                Destroy(food); // Remove food from gameObjects list

                // Debug log for food removal
                Console.WriteLine($"Food removed: {food.brush.Color}");

                // Generate new food at a random position
                do
                {
                    randomX = rand.Next(pistaX + grosorBorde, pistaX + pistaAncho - grosorBorde);
                    randomY = rand.Next(pistaY + grosorBorde, pistaY + pistaAlto - grosorBorde);
                } while (Math.Abs(randomX - player.x) < player.sizeX && Math.Abs(randomY - player.y) < player.sizeY);

                Instantiate(new myObjective(randomX, randomY, (int)food.sizeX, (int)food.sizeY, food.brush.Color, true));
            }

            if (debugTimer >= debugInterval && debugMode)
            {
                Console.Clear();

                Console.WriteLine($"Player size: {player.sizeX}");
                Console.WriteLine($"Player speed: {baseStep}");
                Console.WriteLine($"Invulnerability active: {isInvulnerable}");
                Console.WriteLine($"Speed boost active: {speedBoostTimer > 0}");

                debugTimer = 0.0f;
            }
        }
    }
}
