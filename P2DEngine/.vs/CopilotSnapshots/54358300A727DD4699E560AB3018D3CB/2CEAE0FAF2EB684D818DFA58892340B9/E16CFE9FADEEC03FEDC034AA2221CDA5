using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Animation;

namespace P2DEngine
{
    // Como puede ver, esta hereda de myBlock y no de myGameObject.
    public class Enemy : myBlock
    {
        public float speed { get; set; } //Se añade una variable de velocidad para controla el movimiento

        private float directionX;
        private float directionY;

        public Enemy(float x, float y, float sizeX, float sizeY, Color color) : base((int)x, (int)y, (int)sizeX, (int)sizeY, color)
        {
            speed = 0.6f;

            // Initialize random movement direction
            Random rand = new Random();
            directionX = (float)(rand.NextDouble() * 2 - 1); // Random value between -1 and 1
            directionY = (float)(rand.NextDouble() * 2 - 1);
            NormalizeDirection();
        }

        public override void Draw(Graphics g, Vector position, Vector size)
        {
            //Se dibuja como un rectangulo
            g.FillEllipse(brush, (float)position.X, (float)position.Y, (float)size.X, (float)size.Y);
        }

        // Puede tener su propio update, que lo diferencia de los otros myBlock.
        public override void Update(float deltaTime)
        {
            // Move enemy based on direction and speed
            float speed = Math.Max(1.0f, 30.0f / (sizeX + sizeY)); // Speed inversely proportional to size
            x += directionX * speed * deltaTime;
            y += directionY * speed * deltaTime;
        }

        public void ReverseXDirection()
        {
            directionX = -directionX;
        }

        public void ReverseYDirection()
        {
            directionY = -directionY;
        }

        private void NormalizeDirection()
        {
            float magnitude = (float)Math.Sqrt(directionX * directionX + directionY * directionY);
            if (magnitude > 0)
            {
                directionX /= magnitude;
                directionY /= magnitude;
            }
        }
    }
}
